From 26379764124878c83499196ea86ff88b5a66237d Mon Sep 17 00:00:00 2001
From: Bruce Ashfield <bruce.ashfield@gmail.com>
Date: Fri, 11 Jul 2025 11:21:20 -0400
Subject: [PATCH 4/8] aufs6: standalone

Signed-off-by: Bruce Ashfield <bruce.ashfield@gmail.com>
---
 fs/dcache.c              | 2 ++
 fs/exec.c                | 1 +
 fs/fcntl.c               | 1 +
 fs/file_table.c          | 1 +
 fs/namespace.c           | 4 ++++
 fs/notify/fsnotify.c     | 1 +
 fs/notify/group.c        | 1 +
 fs/open.c                | 1 +
 fs/read_write.c          | 2 ++
 fs/splice.c              | 1 +
 fs/xattr.c               | 1 +
 kernel/locking/lockdep.c | 1 +
 kernel/task_work.c       | 1 +
 security/security.c      | 8 ++++++++
 14 files changed, 26 insertions(+)

diff --git a/fs/dcache.c b/fs/dcache.c
index 7f483c97810f..7f1b9af1355b 100644
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@ -1387,6 +1387,7 @@ void d_walk(struct dentry *parent, void *data,
 	seq = 1;
 	goto again;
 }
+EXPORT_SYMBOL_GPL(d_walk);
 
 struct check_mount {
 	struct vfsmount *mnt;
@@ -2902,6 +2903,7 @@ void d_exchange(struct dentry *dentry1, struct dentry *dentry2)
 
 	write_sequnlock(&rename_lock);
 }
+EXPORT_SYMBOL_GPL(d_exchange);
 
 /**
  * d_ancestor - search for an ancestor
diff --git a/fs/exec.c b/fs/exec.c
index ba400aafd640..31f0a6e5acac 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -120,6 +120,7 @@ bool path_noexec(const struct path *path)
 	return (path->mnt->mnt_flags & MNT_NOEXEC) ||
 	       (path->mnt->mnt_sb->s_iflags & SB_I_NOEXEC);
 }
+EXPORT_SYMBOL_GPL(path_noexec);
 
 #ifdef CONFIG_MMU
 /*
diff --git a/fs/fcntl.c b/fs/fcntl.c
index 90af6a47fbad..7d4eaaff13bc 100644
--- a/fs/fcntl.c
+++ b/fs/fcntl.c
@@ -89,6 +89,7 @@ int setfl(int fd, struct file * filp, unsigned int arg)
  out:
 	return error;
 }
+EXPORT_SYMBOL_GPL(setfl);
 
 /*
  * Allocate an file->f_owner struct if it doesn't exist, handling racing
diff --git a/fs/file_table.c b/fs/file_table.c
index 138114d64307..1b95604f19e2 100644
--- a/fs/file_table.c
+++ b/fs/file_table.c
@@ -253,6 +253,7 @@ struct file *alloc_empty_file(int flags, const struct cred *cred)
 	}
 	return ERR_PTR(-ENFILE);
 }
+EXPORT_SYMBOL_GPL(alloc_empty_file);
 
 /*
  * Variant of alloc_empty_file() that doesn't check and modify nr_files.
diff --git a/fs/namespace.c b/fs/namespace.c
index fca52af064af..e1b1390762eb 100644
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1009,6 +1009,7 @@ int is_current_mnt_ns(struct vfsmount *mnt)
 {
 	return check_mnt(real_mount(mnt));
 }
+EXPORT_SYMBOL_GPL(is_current_mnt_ns);
 
 static inline bool check_anonymous_mnt(struct mount *mnt)
 {
@@ -2365,6 +2366,7 @@ struct path *collect_paths(const struct path *path,
 		path_get(p);
 	return res;
 }
+EXPORT_SYMBOL_GPL(collect_paths);
 
 void drop_collected_paths(struct path *paths, struct path *prealloc)
 {
@@ -2373,6 +2375,7 @@ void drop_collected_paths(struct path *paths, struct path *prealloc)
 	if (paths != prealloc)
 		kfree(paths);
 }
+EXPORT_SYMBOL_GPL(drop_collected_paths);
 
 static void free_mnt_ns(struct mnt_namespace *);
 static struct mnt_namespace *alloc_mnt_ns(struct user_namespace *, bool);
@@ -2461,6 +2464,7 @@ static bool __has_locked_children(struct mount *mnt, struct dentry *dentry)
 	}
 	return false;
 }
+EXPORT_SYMBOL_GPL(drop_collected_mounts);
 
 bool has_locked_children(struct mount *mnt, struct dentry *dentry)
 {
diff --git a/fs/notify/fsnotify.c b/fs/notify/fsnotify.c
index e2b4f17a48bb..7a411ea72cea 100644
--- a/fs/notify/fsnotify.c
+++ b/fs/notify/fsnotify.c
@@ -225,6 +225,7 @@ int fsnotify_pre_content(const struct path *path, const loff_t *ppos,
 	return fsnotify_parent(path->dentry, FS_PRE_ACCESS, &range,
 			       FSNOTIFY_EVENT_FILE_RANGE);
 }
+EXPORT_SYMBOL_GPL(fsnotify_pre_content);
 
 /*
  * Notify this dentry's parent about a child's events with child name info
diff --git a/fs/notify/group.c b/fs/notify/group.c
index 18446b7b0d49..09138e0b8a6a 100644
--- a/fs/notify/group.c
+++ b/fs/notify/group.c
@@ -100,6 +100,7 @@ void fsnotify_get_group(struct fsnotify_group *group)
 {
 	refcount_inc(&group->refcnt);
 }
+EXPORT_SYMBOL_GPL(fsnotify_get_group);
 
 /*
  * Drop a reference to a group.  Free it if it's through.
diff --git a/fs/open.c b/fs/open.c
index 7828234a7caa..bdc55f69a9db 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -69,6 +69,7 @@ int do_truncate(struct mnt_idmap *idmap, struct dentry *dentry,
 	inode_unlock(dentry->d_inode);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_truncate);
 
 int vfs_truncate(const struct path *path, loff_t length)
 {
diff --git a/fs/read_write.c b/fs/read_write.c
index 0ef70e128c4a..52806554f78e 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -579,6 +579,7 @@ ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 	inc_syscr(current);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_read);
 
 static ssize_t new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
 {
@@ -694,6 +695,7 @@ ssize_t vfs_write(struct file *file, const char __user *buf, size_t count, loff_
 	file_end_write(file);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_write);
 
 /* file_ppos returns &file->f_pos or NULL if file is stream */
 static inline loff_t *file_ppos(struct file *file)
diff --git a/fs/splice.c b/fs/splice.c
index 73cd917c821f..eb7b4d93a352 100644
--- a/fs/splice.c
+++ b/fs/splice.c
@@ -934,6 +934,7 @@ ssize_t do_splice_from(struct pipe_inode_info *pipe, struct file *out,
 		return warn_unsupported(out, "write");
 	return out->f_op->splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_from);
 
 /*
  * Indicate to the caller that there was a premature EOF when reading from the
diff --git a/fs/xattr.c b/fs/xattr.c
index 600ae97969cf..ffe4d60b01f9 100644
--- a/fs/xattr.c
+++ b/fs/xattr.c
@@ -405,6 +405,7 @@ vfs_getxattr_alloc(struct mnt_idmap *idmap, struct dentry *dentry,
 	*xattr_value = value;
 	return error;
 }
+EXPORT_SYMBOL_GPL(vfs_getxattr_alloc);
 
 ssize_t
 __vfs_getxattr(struct dentry *dentry, struct inode *inode, const char *name,
diff --git a/kernel/locking/lockdep.c b/kernel/locking/lockdep.c
index e3a5bfdb88c6..d82ca73a54e6 100644
--- a/kernel/locking/lockdep.c
+++ b/kernel/locking/lockdep.c
@@ -245,6 +245,7 @@ inline struct lock_class *lockdep_hlock_class(struct held_lock *hlock)
 	 */
 	return lock_classes + class_idx;
 }
+EXPORT_SYMBOL_GPL(lockdep_hlock_class);
 #define hlock_class(hlock) lockdep_hlock_class(hlock)
 
 #ifdef CONFIG_LOCK_STAT
diff --git a/kernel/task_work.c b/kernel/task_work.c
index d1efec571a4a..eed18cc26c37 100644
--- a/kernel/task_work.c
+++ b/kernel/task_work.c
@@ -230,3 +230,4 @@ void task_work_run(void)
 		} while (work);
 	}
 }
+EXPORT_SYMBOL_GPL(task_work_run);
diff --git a/security/security.c b/security/security.c
index 596d41818577..19fd676e50c1 100644
--- a/security/security.c
+++ b/security/security.c
@@ -1948,6 +1948,7 @@ int security_path_rmdir(const struct path *dir, struct dentry *dentry)
 		return 0;
 	return call_int_hook(path_rmdir, dir, dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_rmdir);
 
 /**
  * security_path_unlink() - Check if removing a hard link is allowed
@@ -1983,6 +1984,7 @@ int security_path_symlink(const struct path *dir, struct dentry *dentry,
 		return 0;
 	return call_int_hook(path_symlink, dir, dentry, old_name);
 }
+EXPORT_SYMBOL_GPL(security_path_symlink);
 
 /**
  * security_path_link - Check if creating a hard link is allowed
@@ -2001,6 +2003,7 @@ int security_path_link(struct dentry *old_dentry, const struct path *new_dir,
 		return 0;
 	return call_int_hook(path_link, old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_link);
 
 /**
  * security_path_rename() - Check if renaming a file is allowed
@@ -2062,6 +2065,7 @@ int security_path_chmod(const struct path *path, umode_t mode)
 		return 0;
 	return call_int_hook(path_chmod, path, mode);
 }
+EXPORT_SYMBOL_GPL(security_path_chmod);
 
 /**
  * security_path_chown() - Check if changing the file's owner/group is allowed
@@ -2079,6 +2083,7 @@ int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
 		return 0;
 	return call_int_hook(path_chown, path, uid, gid);
 }
+EXPORT_SYMBOL_GPL(security_path_chown);
 
 /**
  * security_path_chroot() - Check if changing the root directory is allowed
@@ -2323,6 +2328,7 @@ int security_inode_permission(struct inode *inode, int mask)
 		return 0;
 	return call_int_hook(inode_permission, inode, mask);
 }
+EXPORT_SYMBOL_GPL(security_inode_permission);
 
 /**
  * security_inode_setattr() - Check if setting file attributes is allowed
@@ -2843,6 +2849,7 @@ int security_file_permission(struct file *file, int mask)
 {
 	return call_int_hook(file_permission, file, mask);
 }
+EXPORT_SYMBOL_GPL(security_file_permission);
 
 /**
  * security_file_alloc() - Allocate and init a file's LSM blob
@@ -3145,6 +3152,7 @@ int security_file_truncate(struct file *file)
 {
 	return call_int_hook(file_truncate, file);
 }
+EXPORT_SYMBOL_GPL(security_file_truncate);
 
 /**
  * security_task_alloc() - Allocate a task's LSM blob
-- 
2.39.2

