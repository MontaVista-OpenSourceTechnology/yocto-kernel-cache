From a92597b5a5dfe984e4f6fab35efaa8fcbe5109f9 Mon Sep 17 00:00:00 2001
From: Jianpeng Chang <jianpeng.chang.cn@windriver.com>
Date: Thu, 19 Jun 2025 13:58:31 +0800
Subject: [PATCH] yaffs: fix aops->write_begin to work on folio correctly

When writing to a yaffs2 FS file with command dd, there is kernel panic
as below:
Unable to handle kernel NULL pointer dereference at virtual
address 0000000000000000
......
Internal error: Oops: 0000000096000004 [#1] PREEMPT SMP
Modules linked in:
CPU: 1 UID: 0 PID: 995 Comm: dd Not tainted 6.12.33-rt6-yocto-preempt-rt #1
......
Call trace:
 yaffs_write_begin+0x9c/0x1d0
 generic_perform_write+0xd0/0x270
 __generic_file_write_iter+0xb4/0xd8
 ......
 el0t_64_sync_handler+0x120/0x130
 el0t_64_sync+0x190/0x198

Because commit a24784fd8f88 ("yaffs2: update to v6.12 folio changes")
converted aops->write_begin to take a folio in yaffs_write_begin, but
forgot to change the following code which still works on a page. Fix the
yaffs_write_begin to work on one page of a folio.

Signed-off-by: Jianpeng Chang <jianpeng.chang.cn@windriver.com>
Signed-off-by: Bruce Ashfield <bruce.ashfield@gmail.com>
---
 fs/yaffs2/yaffs_vfs.c | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/fs/yaffs2/yaffs_vfs.c b/fs/yaffs2/yaffs_vfs.c
index 5f31158523e2..3aabb259c613 100644
--- a/fs/yaffs2/yaffs_vfs.c
+++ b/fs/yaffs2/yaffs_vfs.c
@@ -561,7 +561,7 @@ static int yaffs_write_begin(struct file *filp, struct address_space *mapping,
 			     struct page **pagep, void **fsdata)
 #endif
 {
-	struct page *pg = NULL;
+	__maybe_unused struct page *pg = NULL;
 	pgoff_t index = pos >> PAGE_CACHE_SHIFT;
 
 	int ret = 0;
@@ -570,20 +570,20 @@ static int yaffs_write_begin(struct file *filp, struct address_space *mapping,
 	/* Get a page */
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
 	*foliop = __filemap_get_folio(mapping, index, FGP_WRITEBEGIN,
-+                       mapping_gfp_mask(mapping));
+			mapping_gfp_mask(mapping));
 #elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 28)
 	pg = grab_cache_page_write_begin(mapping, index, flags);
 #else
 	pg = __grab_cache_page(mapping, index);
 #endif
 
-	if (!*foliop) {
-		ret = -ENOMEM;
+	if (IS_ERR(*foliop)) {
+		ret = PTR_ERR(*foliop);
 		goto out;
 	}
 	yaffs_trace(YAFFS_TRACE_OS,
 		"start yaffs_write_begin index %d(%x) uptodate %d",
-		(int)index, (int)index, Page_Uptodate(pg) ? 1 : 0);
+		(int)index, (int)index, folio_test_uptodate(*foliop) ? 1 : 0);
 
 	/* Get fs space */
 	space_held = yaffs_hold_space(filp);
@@ -595,8 +595,8 @@ static int yaffs_write_begin(struct file *filp, struct address_space *mapping,
 
 	/* Update page if required */
 
-	if (!Page_Uptodate(pg))
-		ret = yaffs_readpage_nolock(filp, pg);
+	if (folio_test_uptodate(*foliop))
+		ret = yaffs_readpage_unlock(filp, &(*foliop)->page);
 
 	if (ret)
 		goto out;
@@ -611,9 +611,9 @@ static int yaffs_write_begin(struct file *filp, struct address_space *mapping,
 		"end yaffs_write_begin fail returning %d", ret);
 	if (space_held)
 		yaffs_release_space(filp);
-	if (pg) {
-		unlock_page(pg);
-		page_cache_release(pg);
+	if (!IS_ERR(*foliop)) {
+		folio_unlock(*foliop);
+		folio_put(*foliop);
 	}
 	return ret;
 }
-- 
2.39.2

